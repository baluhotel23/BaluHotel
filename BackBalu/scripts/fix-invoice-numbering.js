/**
 * Script para corregir la numeraci√≥n de facturas
 * Asegura que el √∫ltimo n√∫mero usado sea 56 y el pr√≥ximo sea 57
 */

const { Invoice, sequelize } = require('../src/data');
const { Op } = require('sequelize');

async function fixInvoiceNumbering() {
  try {
    console.log('üîç === VERIFICACI√ìN DE NUMERACI√ìN DE FACTURAS ===\n');

    // 1. Ver todas las facturas y sus n√∫meros
    const allInvoices = await Invoice.findAll({
      where: {
        invoiceSequentialNumber: { [Op.ne]: null }
      },
      order: [
        [sequelize.cast(sequelize.col('invoiceSequentialNumber'), 'INTEGER'), 'DESC']
      ],
      attributes: ['id', 'invoiceSequentialNumber', 'invoiceNumber', 'status', 'createdAt', 'billId']
    });

    console.log('üìä FACTURAS EXISTENTES:');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    allInvoices.forEach((inv, index) => {
      console.log(`${index + 1}. N√∫mero secuencial: ${inv.invoiceSequentialNumber} | N√∫mero completo: ${inv.invoiceNumber} | Estado: ${inv.status} | Fecha: ${inv.createdAt.toISOString().split('T')[0]}`);
    });
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

    if (allInvoices.length === 0) {
      console.log('‚úÖ No hay facturas en el sistema. El pr√≥ximo n√∫mero ser√° 56.\n');
      return;
    }

    // 2. Identificar n√∫meros mayores a 56
    const numbersAbove56 = allInvoices.filter(inv => 
      parseInt(inv.invoiceSequentialNumber) > 56
    );

    if (numbersAbove56.length > 0) {
      console.log('‚ö†Ô∏è  FACTURAS CON N√öMEROS MAYORES A 56 ENCONTRADAS:');
      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      numbersAbove56.forEach(inv => {
        console.log(`   ID: ${inv.id}`);
        console.log(`   N√∫mero secuencial: ${inv.invoiceSequentialNumber}`);
        console.log(`   N√∫mero completo: ${inv.invoiceNumber}`);
        console.log(`   Estado: ${inv.status}`);
        console.log(`   BillId: ${inv.billId}`);
        console.log(`   Fecha: ${inv.createdAt.toISOString()}`);
        console.log('   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
      });
      console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');

      console.log('üîß OPCIONES DE CORRECCI√ìN:\n');
      console.log('1Ô∏è‚É£  OPCI√ìN 1: Eliminar facturas con n√∫meros > 56 (solo si son de prueba)');
      console.log('   ‚Üí Esto dejar√° el n√∫mero 56 como el √∫ltimo usado\n');
      
      console.log('2Ô∏è‚É£  OPCI√ìN 2: Actualizar n√∫meros > 56 para que sean <= 56');
      console.log('   ‚Üí Renumerar estas facturas a n√∫meros disponibles\n');
      
      console.log('3Ô∏è‚É£  OPCI√ìN 3: Marcar facturas > 56 como canceladas/anuladas');
      console.log('   ‚Üí Mantener el registro pero invalidar los n√∫meros\n');

      console.log('‚ö†Ô∏è  IMPORTANTE: Este script solo muestra informaci√≥n.');
      console.log('‚ö†Ô∏è  Para aplicar correcciones, descomenta la funci√≥n deseada abajo.\n');
    } else {
      const lastNumber = parseInt(allInvoices[0].invoiceSequentialNumber);
      console.log(`‚úÖ El √∫ltimo n√∫mero usado es: ${lastNumber}`);
      console.log(`‚úÖ El pr√≥ximo n√∫mero ser√°: ${lastNumber + 1}\n`);
      
      if (lastNumber === 56) {
        console.log('‚úÖ ¬°PERFECTO! El sistema est√° correctamente configurado.');
        console.log('‚úÖ La pr√≥xima factura ser√° la n√∫mero 57.\n');
      } else if (lastNumber < 56) {
        console.log(`‚ö†Ô∏è  El √∫ltimo n√∫mero (${lastNumber}) es menor a 56.`);
        console.log(`‚ö†Ô∏è  El pr√≥ximo n√∫mero ser√° ${lastNumber + 1}, no 57.\n`);
      }
    }

  } catch (error) {
    console.error('‚ùå Error:', error.message);
    console.error(error);
  } finally {
    await sequelize.close();
  }
}

// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
// FUNCIONES DE CORRECCI√ìN (DESCOMENTA LA QUE NECESITES)
// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

/**
 * OPCI√ìN 1: Eliminar facturas con n√∫meros > 56
 * ‚ö†Ô∏è  CUIDADO: Esto elimina permanentemente los registros
 */
async function deleteInvoicesAbove56() {
  try {
    console.log('üóëÔ∏è  Eliminando facturas con n√∫meros > 56...\n');
    
    const deleted = await Invoice.destroy({
      where: {
        invoiceSequentialNumber: {
          [Op.gt]: '56'
        }
      }
    });
    
    console.log(`‚úÖ ${deleted} factura(s) eliminada(s).\n`);
    
    // Verificar resultado
    const remaining = await Invoice.findOne({
      order: [
        [sequelize.cast(sequelize.col('invoiceSequentialNumber'), 'INTEGER'), 'DESC']
      ]
    });
    
    if (remaining) {
      console.log(`‚úÖ √öltimo n√∫mero ahora: ${remaining.invoiceSequentialNumber}`);
    }
    
  } catch (error) {
    console.error('‚ùå Error eliminando:', error.message);
  }
}

/**
 * OPCI√ìN 2: Marcar como canceladas las facturas > 56
 */
async function cancelInvoicesAbove56() {
  try {
    console.log('üö´ Marcando facturas > 56 como canceladas...\n');
    
    const updated = await Invoice.update(
      { status: 'cancelled' },
      {
        where: {
          invoiceSequentialNumber: {
            [Op.gt]: '56'
          }
        }
      }
    );
    
    console.log(`‚úÖ ${updated[0]} factura(s) cancelada(s).\n`);
    
  } catch (error) {
    console.error('‚ùå Error cancelando:', error.message);
  }
}

/**
 * OPCI√ìN 3: Actualizar manualmente un n√∫mero espec√≠fico
 * Ejemplo: cambiar el n√∫mero 70 por 56
 */
async function updateSpecificInvoiceNumber(fromNumber, toNumber) {
  try {
    console.log(`üîÑ Actualizando factura ${fromNumber} a ${toNumber}...\n`);
    
    const invoice = await Invoice.findOne({
      where: { invoiceSequentialNumber: fromNumber.toString() }
    });
    
    if (!invoice) {
      console.log(`‚ùå No se encontr√≥ factura con n√∫mero ${fromNumber}`);
      return;
    }
    
    // Actualizar n√∫mero secuencial y n√∫mero completo
    await invoice.update({
      invoiceSequentialNumber: toNumber.toString(),
      invoiceNumber: `FVK${toNumber}` // Ajustar seg√∫n tu formato
    });
    
    console.log(`‚úÖ Factura actualizada de ${fromNumber} a ${toNumber}\n`);
    
  } catch (error) {
    console.error('‚ùå Error actualizando:', error.message);
  }
}

// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
// EJECUTAR SCRIPT
// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

// Por defecto solo muestra informaci√≥n
fixInvoiceNumbering();

// Para aplicar correcciones, descomenta UNA de estas l√≠neas:

// deleteInvoicesAbove56();           // ‚ö†Ô∏è Elimina facturas > 56
// cancelInvoicesAbove56();           // üö´ Cancela facturas > 56
// updateSpecificInvoiceNumber(70, 56); // üîÑ Cambia un n√∫mero espec√≠fico
