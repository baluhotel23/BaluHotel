const { Invoice } = require('../../data');
const { Op } = require('sequelize');

// üîß CONFIGURACI√ìN DE RESOLUCI√ìN
const RESOLUTION_CONFIG = {
  from: 1,
  to: 500,
  prefix: "FVK",
  resolutionNumber: "18764001234567",
  startDate: "2024-01-01",
  endDate: "2024-12-31"
};

/**
 * Obtiene el siguiente n√∫mero secuencial disponible
 */
const getNextInvoiceNumber = async () => {
  try {
    console.log('üî¢ Obteniendo siguiente n√∫mero de Invoice...');

    // Buscar el √∫ltimo n√∫mero usado exitosamente
    const lastInvoice = await Invoice.findOne({
      where: {
        invoiceSequentialNumber: { [Op.ne]: null },
        status: 'sent'
      },
      order: [['invoiceSequentialNumber', 'DESC']],
      attributes: ['invoiceSequentialNumber', 'sentToTaxxaAt']
    });

    let nextNumber = RESOLUTION_CONFIG.from; // ‚úÖ SIEMPRE EMPEZAR DESDE 1

    if (lastInvoice && lastInvoice.invoiceSequentialNumber) {
      const lastNumber = parseInt(lastInvoice.invoiceSequentialNumber);
      nextNumber = lastNumber + 1;
      
      console.log(`üìä √öltimo n√∫mero usado: ${lastNumber}`);
      console.log(`üî¢ Siguiente n√∫mero calculado: ${nextNumber}`);
    } else {
      console.log('üìä No hay invoices previos enviados exitosamente');
      console.log(`üî¢ Comenzando desde el n√∫mero inicial: ${nextNumber}`);
    }

    // Verificar que no exceda la resoluci√≥n
    if (nextNumber > RESOLUTION_CONFIG.to) {
      throw new Error(`‚ùå Se ha alcanzado el l√≠mite de la resoluci√≥n. N√∫mero ${nextNumber} excede el m√°ximo ${RESOLUTION_CONFIG.to}`);
    }

    // ‚úÖ VERIFICAR DISPONIBILIDAD CONSIDERANDO TODOS LOS ESTADOS
    // Buscar cualquier factura (pendiente, enviada, fallida) con ese n√∫mero
    const existingInvoice = await Invoice.findOne({
      where: { 
        invoiceSequentialNumber: nextNumber.toString(),
        status: { [Op.in]: ['pending', 'sent'] } // Solo considerar activas
      }
    });

    if (existingInvoice) {
      console.warn(`‚ö†Ô∏è N√∫mero ${nextNumber} ya est√° en uso (estado: ${existingInvoice.status})`);
      console.log('üîç Buscando siguiente n√∫mero disponible...');
      return await findNextAvailableNumber(nextNumber + 1);
    }

    console.log(`‚úÖ N√∫mero ${nextNumber} disponible para usar`);
    return nextNumber.toString();

  } catch (error) {
    console.error('‚ùå Error obteniendo siguiente n√∫mero:', error.message);
    throw error;
  }
};

/**
 * Busca el siguiente n√∫mero disponible en caso de conflicto
 */
const findNextAvailableNumber = async (startFrom) => {
  console.log(`üîç Buscando n√∫mero disponible desde: ${startFrom}`);
  
  for (let number = startFrom; number <= RESOLUTION_CONFIG.to; number++) {
    const existing = await Invoice.findOne({
      where: { 
        invoiceSequentialNumber: number.toString(),
        status: { [Op.in]: ['pending', 'sent'] } // Solo considerar activas
      }
    });

    if (!existing) {
      console.log(`‚úÖ N√∫mero disponible encontrado: ${number}`);
      return number.toString();
    } else {
      console.log(`‚ùå N√∫mero ${number} ya en uso (estado: ${existing.status})`);
    }
  }

  throw new Error(`‚ùå No hay n√∫meros disponibles en la resoluci√≥n (${RESOLUTION_CONFIG.from}-${RESOLUTION_CONFIG.to})`);
};

/**
 * Crear una nueva factura fiscal (Invoice) con numeraci√≥n secuencial
 */
const createInvoiceWithNumber = async (billData) => {
  try {
    console.log('üìÑ Iniciando creaci√≥n de factura fiscal...');
    console.log('üìã Datos recibidos:', JSON.stringify(billData, null, 2));

    // ‚úÖ OBTENER N√öMERO SECUENCIAL
    const nextNumber = await getNextInvoiceNumber();
    console.log(`üî¢ N√∫mero asignado: ${nextNumber}`);
    
    const invoiceData = {
      billId: billData.billId,
      invoiceSequentialNumber: nextNumber,
      prefix: RESOLUTION_CONFIG.prefix,
      
      // Datos del comprador
      buyerId: billData.buyerId,
      buyerName: billData.buyerName,
      buyerEmail: billData.buyerEmail,
      
      // Datos del vendedor
      sellerId: billData.sellerId,
      sellerName: billData.sellerName,
      
      // Montos
      totalAmount: billData.totalAmount,
      taxAmount: billData.taxAmount || 0,
      netAmount: billData.netAmount || billData.totalAmount,
      
      // Resoluci√≥n
      resolutionNumber: RESOLUTION_CONFIG.resolutionNumber,
      resolutionFrom: RESOLUTION_CONFIG.from,
      resolutionTo: RESOLUTION_CONFIG.to,
      resolutionStartDate: RESOLUTION_CONFIG.startDate,
      resolutionEndDate: RESOLUTION_CONFIG.endDate,
      
      // Referencia
      orderReference: billData.orderReference,
      
      status: 'pending'
    };

    console.log('üìÑ Datos de la factura a crear:', JSON.stringify(invoiceData, null, 2));

    const invoice = await Invoice.create(invoiceData);
    
    console.log(`‚úÖ Factura fiscal creada exitosamente`);
    console.log(`üìÑ Invoice ID: ${invoice.id}`);
    console.log(`üî¢ N√∫mero completo: ${invoice.getFullInvoiceNumber()}`);
    
    return invoice;

  } catch (error) {
    console.error('‚ùå Error creando factura fiscal:', error.message);
    console.error('üìä Stack trace:', error.stack);
    throw error;
  }
};

/**
 * Cancelar una factura fiscal y liberar su n√∫mero
 */
const cancelInvoice = async (invoiceId) => {
  try {
    console.log(`üóëÔ∏è Cancelando factura fiscal: ${invoiceId}`);
    
    const invoice = await Invoice.findByPk(invoiceId);
    if (!invoice) {
      throw new Error('Factura fiscal no encontrada');
    }

    if (invoice.status === 'sent') {
      throw new Error('No se puede cancelar una factura ya enviada exitosamente');
    }

    await invoice.update({ status: 'cancelled' });
    console.log(`‚úÖ Factura fiscal cancelada. N√∫mero ${invoice.invoiceSequentialNumber} liberado.`);
    
    return invoice;

  } catch (error) {
    console.error('‚ùå Error cancelando factura fiscal:', error.message);
    throw error;
  }
};

/**
 * Obtener estad√≠sticas de numeraci√≥n
 */
const getNumberingStats = async () => {
  try {
    console.log('üìä Calculando estad√≠sticas de numeraci√≥n...');
    
    const totalSent = await Invoice.count({
      where: { status: 'sent' }
    });

    const totalPending = await Invoice.count({
      where: { status: 'pending' }
    });

    const totalCancelled = await Invoice.count({
      where: { status: 'cancelled' }
    });

    const totalFailed = await Invoice.count({
      where: { status: 'failed' }
    });

    // ‚úÖ CALCULAR DISPONIBLES CORRECTAMENTE
    const used = totalSent + totalPending; // Enviadas + Pendientes = En uso
    const available = RESOLUTION_CONFIG.to - used;

    const lastUsed = await Invoice.findOne({
      where: { status: 'sent' },
      order: [['invoiceSequentialNumber', 'DESC']],
      attributes: ['invoiceSequentialNumber', 'sentToTaxxaAt']
    });

    // ‚úÖ OBTENER SIGUIENTE N√öMERO SIN CREAR FACTURA
    let nextAvailable = null;
    try {
      nextAvailable = await getNextInvoiceNumber();
    } catch (error) {
      console.warn('‚ö†Ô∏è No se pudo calcular siguiente n√∫mero:', error.message);
    }

    const stats = {
      resolution: RESOLUTION_CONFIG,
      counters: {
        sent: totalSent,
        pending: totalPending,
        cancelled: totalCancelled,
        failed: totalFailed,
        used: used,
        available: available
      },
      lastUsedNumber: lastUsed?.invoiceSequentialNumber || '0',
      nextAvailable: nextAvailable,
      percentage: Math.round((totalSent / RESOLUTION_CONFIG.to) * 100),
      isResolutionFull: available <= 0
    };

    console.log('üìä Estad√≠sticas calculadas:', JSON.stringify(stats, null, 2));
    return stats;

  } catch (error) {
    console.error('‚ùå Error obteniendo estad√≠sticas:', error.message);
    throw error;
  }
};

module.exports = {
  getNextInvoiceNumber,
  createInvoiceWithNumber,
  cancelInvoice,
  getNumberingStats,
  RESOLUTION_CONFIG
};